version: '3'

services:
  # Crowdsec Service
  crowdsec:
    image: crowdsecurity/crowdsec
    container_name: crowdsec
    environment:
      PGID: "1000"
      COLLECTIONS: "crowdsecurity/traefik crowdsecurity/http-cve"
    expose:
      - "8080"
    volumes:
      - /var/log/crowdsec:/var/log/crowdsec:ro
      - /opt/crowdsec-db:/var/lib/crowdsec/data
      - /opt/crowdsec:/etc/crowdsec
    restart: unless-stopped
    networks:
      - proxy
    ## Boncer service
  crowdsec-traefik-bouncer:
    image: fbonalair/traefik-crowdsec-bouncer
    container_name: bouncer-traefik
    environment:
      CROWDSEC_BOUNCER_API_KEY: ##Your key
      CROWDSEC_AGENT_HOST: crowdsec:8080
      GIN_MODE: release
    expose:
      - "8080"
    depends_on:
      - crowdsec
    restart: unless-stopped
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.crowdsec-bouncer.forwardauth.address=http://bouncer-traefik:8080/api/v1/forwardAuth"
      - "traefik.http.middlewares.crowdsec-bouncer.forwardauth.trustForwardHeader=true"
      - "traefik.http.services.crowdsec-bouncer.loadbalancer.server.port=8080"
  # Traefik Service
  traefik:
    restart: unless-stopped
    image: traefik:latest
    command:
      ## Logs for debugging
      - --log.filePath=/var/logs/traefik.log
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      ## Logs for Crowdsec
      - --accessLog=true
      - --accessLog.filePath=/var/log/crowdsec/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-59 # Statut code to log
      - --providers.docker=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.prodresolver.acme.email=youremail@mail.com
      - --certificatesresolvers.prodresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.prodresolver.acme.keytype=RSA4096
      - --certificatesresolvers.prodresolver.acme.tlschallenge=true
      - --certificatesresolvers.prodresolver.acme.httpchallenge=true
      - --certificatesresolvers.prodresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.prodresolver.acme.storage=/letsencrypt/acme.json
      - "--entrypoints.http.http.middlewares=crowdsec-bouncer@docker"
      - "--entrypoints.https.http.middlewares=crowdsec-bouncer@docker"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/log/crowdsec/:/var/log/crowdsec/
      - "./letsencrypt:/letsencrypt"
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - proxy
      - frontend

  # WordPress Service
  wordpress:
    image: wordpress:latest
    container_name: wordpress
    volumes:
      - wordpress_data:/var/www/html
      ## Traefik labels
    labels:
      - "traefik.enable=true"
      - traefik.http.routers.wordpress.rule=Host(`wordpress.yourdomain.com`)
      - traefik.http.routers.wordpress.tls=true
      - traefik.http.routers.wordpress.tls.certresolver=prodresolver
      # Create bouncer middleware
      - "traefik.http.middlewares.crowdsec-bouncer.forwardauth.address=http://bouncer-traefik:8080/api/v1/forwardAuth"
      - "traefik.http.middlewares.crowdsec-bouncer.forwardauth.trustForwardHeader=true"
      - traefik.http.routers.wordpress.middlewares=crowdsec-bouncer@docker
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress
      WORDPRESS_DB_NAME: wordpress
    depends_on:
      - db
    restart: always
    networks:
      - frontend
      - backend

  # MySQL Service for WordPress
  db:
    image: mysql:8.0
    container_name: mysql
    volumes:
      - db_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: somewordpress
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress
    restart: always
    networks:
      - backend

  # Uptime Kuma Service
  uptime_kuma:
    image: louislam/uptime-kuma:latest
    container_name: uptime_kuma
    volumes:
      - uptime_kuma_data:/app/data
      ## Traefik labels
    labels:
      - "traefik.enable=true"
      - traefik.http.routers.uptime.rule=Host(`uptime.yourdomain.com`)
      - traefik.http.routers.uptime.tls=true
      - traefik.http.routers.uptime.tls.certresolver=prodresolver
      # Create bouncer middleware
      - "traefik.http.middlewares.crowdsec-bouncer.forwardauth.address=http://bouncer-traefik:8080/api/v1/forwardAuth"
      - "traefik.http.middlewares.crowdsec-bouncer.forwardauth.trustForwardHeader=true"
      - traefik.http.routers.uptime.middlewares=crowdsec-bouncer@docker
    restart: always
    networks:
      - frontend
  # Jenkins Service
  jenkins:
    image: jenkins/jenkins:lts ## Traefik labels
    labels:
      - "traefik.enable=true"
      - traefik.http.routers.jenkins.rule=Host(`jenkins.yourdomain.com`)
      - traefik.http.routers.jenkins.tls=true
      - traefik.http.routers.jenkins.tls.certresolver=prodresolver
      # Create bouncer middleware
      - "traefik.http.middlewares.crowdsec-bouncer.forwardauth.address=http://bouncer-traefik:8080/api/v1/forwardAuth"
      - "traefik.http.middlewares.crowdsec-bouncer.forwardauth.trustForwardHeader=true"
      - traefik.http.routers.jenkins.middlewares=crowdsec-bouncer@docker
    volumes:
      - jenkins_data:/var/jenkins_home
    restart: always
    networks:
      - frontend
##Volumes part
volumes:
  wordpress_data:
  db_data:
  uptime_kuma_data:
  jenkins_data:

    ## Networks part
networks:
  proxy:
    external: true
  frontend:
    driver: bridge
  backend:
    driver: bridge
